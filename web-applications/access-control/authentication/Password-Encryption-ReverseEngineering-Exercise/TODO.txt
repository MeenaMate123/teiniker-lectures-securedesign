Exercise: Password Storage - Reverse Engineering
-------------------------------------------------------------------------------

You should reverse engineer a password storage algorithm.
 
Given a concrete storage example: 

	salt = c54fcad9814b6e225214780fe09a8ea5
	password = "Trink4Bier"
    hash = c54fcad9814b6e225214780fe09a8ea5bca753e996e11e1147cb59b74faed888ac6d4ca017b605b9a598d4996ea1d43f

You also know that the SHA-256 algorithm has been used and that the storage
procedure performed a number of iterations for hashing.

To solve this problem, implement the following methods:

byte[] encryptPasswordWithIterations(byte[] salt, byte[] password, int n) 
-------------------------------------------------------------------------
	1. Concatenate salt and password arrays.
	
	2. Calculate the hash value of the concatenated array n times
	
	3. Concatenate salt and hash value array to the final result.
	
	4. Implement a proper exception handling: convert all checked exceptions
		into a "IllegalStateException" by keeping the stack trace.
	

testNumberOfIterations()
-----------------------------------
	Call the encryptPasswordWithIterations() method with different values for "n" to
	find out the right iteration count.  	
	If the calculated hash value matches the given one, you have used the right value.
	

byte[] encryptPassword(byte[] salt, byte[] password)
--------------------------------------------------------------
	This convenience method only calls "encryptPasswordWithIterations()" with the correct
	value for n.
	
